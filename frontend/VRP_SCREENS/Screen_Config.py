"""
Tela de Configura√ß√µes: mostra caminhos e flags simples.
"""
import streamlit as st
from backend.VRP_SERVICE.export_paths import DB_PATH, UPLOADS_DIR, EXPORTS_DIR
from backend.VRP_SERVICE.email_service import email_service
from ..VRP_STYLES.layout import page_setup, app_header, section_card, pill

def render():
    page_setup("VRP ‚Ä¢ Configura√ß√µes", icon="‚öôÔ∏è")
    app_header("Configura√ß√µes de Email", "Gerencie o envio de relat√≥rios por e-mail.")

    with section_card("üìß Configura√ß√µes de Email"):
        config_status = email_service.get_config_status()
        if not config_status["configured"]:
            st.warning("‚ö†Ô∏è Configura√ß√µes de email n√£o encontradas!")
        else:
            st.success("‚úÖ Configura√ß√µes de email configuradas!")
            st.write(f"**Servidor:** {config_status['host']}:{config_status['port']}")
            st.write(f"**TLS:** {'Sim' if config_status['use_tls'] else 'N√£o'}")
            st.write(f"**Usu√°rio:** {config_status['user']}")
            st.write(f"**De:** {config_status['email']}")

    with section_card("üë• Emails v√°lidos para envio de relat√≥rios"):
        st.write("Os emails abaixo est√£o dispon√≠veis para envio de relat√≥rios. Configure no [infoemails] do secrets.")
        emails = st.secrets["infoemails"]["EMAILS"].replace(" ","").split(",")
        if emails:
            st.write("**Emails dispon√≠veis:**")
            for email in emails:
                st.write(f"üìß {email}")
        else:
            st.info("Nenhum email dispon√≠vel. Configure no secrets.")
